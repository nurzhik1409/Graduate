using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using MetroFramework.Forms;
using MetroFramework.Controls;
using System.Data.SqlClient;

namespace Graduate
{
    public partial class f_personalCards : MetroForm
    {
        // int idUser = 0;
        int idPers = 0;
        public f_personalCards()
        {
            InitializeComponent();
        }
        public f_personalCards(int idPers)
        {
            InitializeComponent();
            //this.idUser = idUser;
            this.idPers = idPers;
        }

        string connectionString = "Server=192.168.250.25;Database=graduates;user=Rupit;password=Grib04ek:";

        private void MBut_savePersCard_Click(object sender, EventArgs e)
        {

            SqlDataReader sqlReader = null;

            try
            {

                using (SqlConnection connection = new SqlConnection(connectionString))
                {
                    if (idPers == 0)
                    {
                        string query = "INSERT INTO persons (surname, name, patronymic, gender, birthday," +
                    "addressCountry, addressRegion, addressArea, addressCity, addressStreet, addressHome, addressFlat," +
                    "qualificationLevel, trainingDirection, profile, yearIssue," +
                    "nameStateOrg, nameOrg, post, freeWorker, numCertificate, numReference, verificationArrival, commentary) " +

                    "Values(@surname, @name, @patronymic, @gender, @birthday," +
                    "@addressCountry, @addressRegion, @addressArea, @addressCity, @addressStreet, @addressHome, @addressFlat," +
                    "@qualificationLevel, @trainingDirection, @profile, @yearIssue," +
                    "@nameStateOrg, @nameOrg, @post, @freeWorker, @numCertificate, @numReference, @verificationArrival, @commentary)";
                        using (SqlCommand command = new SqlCommand(query, connection))
                        {
                            connection.Open();
                            foreach (var nun in Controls.OfType<MetroTextBox>())
                            {
                                if (nun.Text.Length == 0)
                                    MessageBox.Show("Введите :" + nun.WaterMark);
                                else
                                {
                                    command.Parameters.AddWithValue("@surname", mTextB_surname.Text);
                                    command.Parameters.AddWithValue("@name", mTextB_name.Text);
                                    command.Parameters.AddWithValue("@patronymic", mTextB_patronymic.Text);
                                    command.Parameters.AddWithValue("@gender", (mComboB_gender.Text == "муж" ? "муж" : "жен"));
                                    command.Parameters.AddWithValue("@birthday", mDateTime_birthday.Value); // ДР

                                    command.Parameters.AddWithValue("@addressCountry", mTextB_addressCountry.Text); // Страна
                                    command.Parameters.AddWithValue("@addressRegion", mTextB_addressRegion.Text); // Область
                                    command.Parameters.AddWithValue("@addressArea", mTextB_addressArea.Text); // Район
                                    command.Parameters.AddWithValue("@addressCity", mTextB_addressCity.Text); // Город
                                    command.Parameters.AddWithValue("@addressStreet", mTextB_addressStreet.Text); // Улица
                                    command.Parameters.AddWithValue("@addressHome", mTextB_addressHome.Text); // Дом
                                    command.Parameters.AddWithValue("@addressFlat", mTextB_addressFlat.Text); // Квартира

                                    command.Parameters.AddWithValue("@qualificationLevel", mComboB_qualificationLevel.Text == "бакалавр" ? "бакалавр" : "магистр"); // Образовательный уровень бакалавр/магистр
                                    command.Parameters.AddWithValue("@trainingDirection", mTextB_trainingDirection.Text); // Направление подготовки
                                    command.Parameters.AddWithValue("@profile", mTextB_profile.Text); // Профиль
                                    command.Parameters.AddWithValue("@yearIssue", mTextB_yearIssue.Text); // Год выпуска

                                    command.Parameters.AddWithValue("@nameStateOrg", mTextB_nameStateOrg.Text); // Название гос организации
                                    command.Parameters.AddWithValue("@nameOrg", mTextB_nameOrg.Text); // Название органпизации
                                    command.Parameters.AddWithValue("@post", mTextB_post.Text); // Должность
                                    command.Parameters.AddWithValue("@freeWorker", (mCheckB_freeWork.Checked ? "T" : "F")); // Право самостоятельного трудоустройства
                                    command.Parameters.AddWithValue("@numCertificate", mTextB_numCertificate.Text); // № выданного свидетельсва
                                    command.Parameters.AddWithValue("@numReference", mTextB_numReference.Text); // № Выданной справки
                                    command.Parameters.AddWithValue("@verificationArrival", mCheckB_verificationArrival.Checked ? "T" : "F"); // Подтверждение о прибытии
                                    command.Parameters.AddWithValue("@commentary", mTextB_commentary.Text); // Доп инфа

                                    command.ExecuteNonQuery();
                                    MessageBox.Show("Запись добавлена");
                                    connection.Close();
                                }
                            }

                        }
                    }
                    else
                    {
                        string query = "UPDATE PERSONS set surname=@surname, name=@name, patronymic=@patronymic, gender=@gender, " +
                            "addressCountry=@addressCountry, addressRegion=@addressRegion, addressArea=@addressArea, addressCity=@addressCity, addressStreet=@addressStreet, addressHome=@addressHome, addressFlat=@addressFlat," +
                            "qualificationLevel@qualificationLevel, trainingDirection=@trainingDirection, profile=@profile, yearIssue=@yearIssue" +
                            "nameStateOrg=@nameStateOrg, nameOrg=@nameOrg, post=@post, freeWorker=@freeWorker, numCertificate=@numCertificate, numReference=@numReference, verificationArrival=@verificationArrival, commentary=@commentary" +
                            "  where id =" + idPers.ToString() + ";";
                        using (SqlCommand command = new SqlCommand(query, connection))
                        {
                            command.Parameters.AddWithValue("@surname", mTextB_surname.Text);
                            command.Parameters.AddWithValue("@name", mTextB_name.Text);
                            command.Parameters.AddWithValue("@patronymic", mTextB_patronymic.Text);
                            command.Parameters.AddWithValue("@gender", (mComboB_gender.Text == "муж" ? "муж" : "жен"));
                            command.Parameters.AddWithValue("@birthday", mDateTime_birthday.Value); // ДР

                            command.Parameters.AddWithValue("@addressCountry", mTextB_addressCountry.Text); // Страна
                            command.Parameters.AddWithValue("@addressRegion", mTextB_addressRegion.Text); // Область
                            command.Parameters.AddWithValue("@addressArea", mTextB_addressArea.Text); // Район
                            command.Parameters.AddWithValue("@addressCity", mTextB_addressCity.Text); // Город
                            command.Parameters.AddWithValue("@addressStreet", mTextB_addressStreet.Text); // Улица
                            command.Parameters.AddWithValue("@addressHome", mTextB_addressHome.Text); // Дом
                            command.Parameters.AddWithValue("@addressFlat", mTextB_addressFlat.Text); // Квартира

                            command.Parameters.AddWithValue("@qualificationLevel", mComboB_qualificationLevel.Text == "бакалавр" ? "бакалавр" : "магистр"); // Образовательный уровень бакалавр/магистр
                            command.Parameters.AddWithValue("@trainingDirection", mTextB_trainingDirection.Text); // Направление подготовки
                            command.Parameters.AddWithValue("@profile", mTextB_profile.Text); // Профиль
                            command.Parameters.AddWithValue("@yearIssue", mTextB_yearIssue.Text); // Год выпуска

                            command.Parameters.AddWithValue("@nameStateOrg", mTextB_nameStateOrg.Text); // Название гос организации
                            command.Parameters.AddWithValue("@nameOrg", mTextB_nameOrg.Text); // Название органпизации
                            command.Parameters.AddWithValue("@post", mTextB_post.Text); // Должность
                            command.Parameters.AddWithValue("@freeWorker", (mCheckB_freeWork.Checked ? "T" : "F")); // Право самостоятельного трудоустройства
                            command.Parameters.AddWithValue("@numCertificate", mTextB_numCertificate.Text); // № выданного свидетельсва
                            command.Parameters.AddWithValue("@numReference", mTextB_numReference.Text); // № Выданной справки
                            command.Parameters.AddWithValue("@verificationArrival", mCheckB_verificationArrival.Checked ? "T" : "F"); // Подтверждение о прибытии
                            command.Parameters.AddWithValue("@commentary", mTextB_commentary.Text); // Доп инфа

                            connection.Open();
                            SqlDataReader rd;
                            rd = command.ExecuteReader();
                            while (rd.Read())
                            {
                                mTextB_surname.Text = rd[1].ToString();
                                mTextB_name.Text = rd[2].ToString();
                               mTextB_patronymic.Text = rd[3].ToString();
                            }
                            rd.Close();
                            command.ExecuteNonQuery();
                            MessageBox.Show("Запись изменена");
                            connection.Close();


                        }
                    }


                }





            }
            catch (Exception ex) { MessageBox.Show(ex.Message.ToString()); }
            finally
            {
                if (sqlReader != null)
                    sqlReader.Close();
            }
        }
        //Всё работает !!!
        private void F_personalCards_Load(object sender, EventArgs e)
        {
            using (SqlConnection connection = new SqlConnection(connectionString))
            {

                string query = "SELECT id, surname, name, patronymic FROM PERSONS where id =" + idPers.ToString();
                using (SqlCommand command = new SqlCommand(query, connection))
                {
                    //command.
                    connection.Open();
                    SqlDataReader rd;
                    rd = command.ExecuteReader();
                    while (rd.Read())
                    {
                        mTextB_surname.Text = rd[1].ToString();
                        mTextB_name.Text = rd[2].ToString();
                        mTextB_patronymic.Text = rd[3].ToString();
                    }
                    rd.Close();
                    command.ExecuteNonQuery();
                    //MessageBox.Show("Запись изменена");
                    connection.Close();

                }
            }
        }
    }
}
